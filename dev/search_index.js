var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DefaultKeywordArguments","category":"page"},{"location":"#DefaultKeywordArguments.jl","page":"Home","title":"DefaultKeywordArguments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage) (Image: Aqua) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"DefaultKeywordArguments.jl is a package to handle default keyword arguments in Julia. It has been developed to support CBX.jl.","category":"page"},{"location":"#The-@default-Macro","page":"Home","title":"The @default Macro","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In Julia, functions can have keyword arguments with a default value. The function","category":"page"},{"location":"","page":"Home","title":"Home","text":"with_keywords(x; a = 2.0, b = 3.0, c = 4.0) = (a * x + b) / c;","category":"page"},{"location":"","page":"Home","title":"Home","text":"will return (2.0 * x + 3.0) / 4.0 unless you specify a different value of a, b, or c.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When you're writing a complex piece of software, you may have multiple functions that use the keyword arguments a, b, and c, and which should all use the same default value. For instance:","category":"page"},{"location":"","page":"Home","title":"Home","text":"with_keywords(x; a = 2.0, b = 3.0, c = 4.0) = (a * x + b) / c;\nanother_with_keywords(x; a = 2.0, b = 3.0, c = 4.0) = round(Int, (a * x + b) / c);\nyet_another_with_keywords(x; a = 2.0, b = 3.0, c = 4.0) = round(Int, c / (a * x + b));","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you have many functions and many keyword arguments, maintaining consistency of the default values can soon become cumbersome. One sensible option would be to collect all the default values in a single place:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_values = (; a = 2.0, b = 3.0, c = 4.0);\nwith_keywords(x; a = default_values.a, b = default_values.b, c = default_values.c) = (a * x + b) / c;\nanother_with_keywords(x; a = default_values.a, b = default_values.b, c = default_values.c) = round(Int, (a * x + b) / c);\nyet_another_with_keywords(x; a = default_values.a, b = default_values.b, c = default_values.c) = round(Int, c / (a * x + b));","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, writing a = default_values.a, b = default_values.b, and c = default_values.c over and over is tedious, and can clutter your code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The @default macro offers an alternative:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_values = (; a = 2.0, b = 3.0, c = 4.0);\n@default default_values with_keywords(x; a, b, c) = (a * x + b) / c;\n@default default_values another_with_keywords(x; a, b, c) = round(Int, (a * x + b) / c);\n@default default_values yet_another_with_keywords(x; a, b, c) = round(Int, c / (a * x + b));","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can write non-compact functions instead:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_values = (; a = 2.0, b = 3.0, c = 4.0);\n@default default_values function with_keywords(x::Float64; a, b, c)\n  return (a * x + b) / c\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also write type annotations and default values as usual. Furthermore, you can overwrite the default values of each keyword argument individually, if required. These are all valid:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_values = (; a = 2.0, b = 3.0, c = 4.0);\n\n# x must be a Float64\n@default default_values with_keywords(x::Float64; a, b, c) = (a * x + b) / c;\n\n# x has a default value of 7\n@default default_values another_with_keywords(x = 7; a, b, c) = round(Int, (a * x + b) / c);\n\n# the default value of a is overriden to 17.5\n@default default_values yet_another_with_keywords(x; a = 17.5, b, c) = round(Int, c / (a * x + b));","category":"page"},{"location":"#The-@config-Macro","page":"Home","title":"The @config Macro","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You might require a more advanced version of parameter handling, where you just pass a config object which propagates across your functions, and then they selectively use default values for certain variables whenever they are not available in config:","category":"page"},{"location":"","page":"Home","title":"Home","text":"function first_call(config)\n  a = (haskey(config, :a)) ? config.a : 2.0\n  b = (haskey(config, :b)) ? config.b : 3.0\n  # some code\n  return second_call(config)\nend\n\nfunction second_call(config)\n  a = (haskey(config, :a)) ? config.a : 2.0\n  c = (haskey(config, :c)) ? config.c : 4.0\n  # some more code\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Calling my_config = (; a = 1.0); first_call(my_config) would use your custom value of a in both functions, but use the default values of b and c when required.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A way to maintain consistency of the default values would be to replace this with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_config = (; a = 2.0, b = 3.0, c = 4.0);\n\nfunction first_call(config)\n  return first_call_expanded(config; config...)\nend\n\nfunction first_call_expanded(config; a = default_config.a, b = default_config.b, args...)\n  b = (haskey(config, :b)) ? config.b : 3.0\n  # some code\n  return second_call(config)\nend\n\nfunction second_call(config)\n  return second_call_expanded(config; config...)\nend\n\nfunction second_call_expanded(config; a = default_config.a, c = default_config.c, args...)\n  # some more code\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code is verbose and repetitive. However, it can be generated by the @config macro instead:","category":"page"},{"location":"","page":"Home","title":"Home","text":"const default_config = (; a = 2.0, b = 3.0, c = 4.0);\n\n@config default_config function first_call(; a, b)\n  # some code\n  return second_call(config)\nend\n\n@config default_config function second_call(; a, c)\n  # some more code\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"To avoid repetition, you don't even have to specify the config argument on each function. Calling my_config = (; a = 1.0); first_call(my_config) will behave as in the previous code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once again, you are allowed to have extra arguments, type annotations, or default values, as you would in any other Julia function.","category":"page"},{"location":"","page":"Home","title":"Home","text":":warning: The code pattern generated by @config allocates some heap memory. This macro should be used for high-level functions that are not performance-critical.","category":"page"},{"location":"#Function-Documentation","page":"Home","title":"Function Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DefaultKeywordArguments]","category":"page"},{"location":"#DefaultKeywordArguments.@config-Tuple{Any, Any}","page":"Home","title":"DefaultKeywordArguments.@config","text":"@config default_config my_function(x; a, b) = ...\n\nThis macro creates a function my_function(config, x) which will have access to the variables a and b. The values a and b will be those in config, if they are present, or else those in default_config.\n\n\n\n\n\n","category":"macro"},{"location":"#DefaultKeywordArguments.@default-Tuple{Any, Any}","page":"Home","title":"DefaultKeywordArguments.@default","text":"@default default_values my_function(x; a, b) = ...\n\nThis macro assigns the values in default_values as the default values for the keyword arguments a and b.\n\n\n\n\n\n","category":"macro"}]
}
